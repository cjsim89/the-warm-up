# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
# Examples:
#
#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])
#   Mayor.create(name: 'Emanuel', city: cities.first)
#
class Seed

  def initialize
    load_problems
  end

  def load_problems
    Problem.create([
      {text: "Logic problems for you! [Click Me](http://cl.ly/4W390s2H2H0m)"},

      {text: "Logic Problems for DAYS. [Days.](http://cl.ly/2m3p33091u1A)"},

      {text: "Let's do this [logic problem](http://cl.ly/2e42381b1O3G)"},

      {text: "This morning for warmup let's try a little code challenge:

       **Can you write a program that \"sings\" the classic \"100 Bottles of Beer on the Wall\"?**"},

       {text: "We have a [logic problem](http://cl.ly/2Z3L2f0Z0o1D) for you today."},

       {text: "Write a program that:

       * Generates the first 100 numbers in the [Fibonacci sequence](http://en.wikipedia.org/wiki/Fibonacci_number)
       * Prints them out one-by-one as it generates them
       * Outputs whether they are or are not prime numbers"},

       {text: "Imagine you have eight developers (Alex, Bernadette, Charles, Dana, Eddie,
       Fernanda, Gus, and Hiro). They want to pair program together every day, but
       they don't like to repeat pairs.

       Write an algorithm to generate a daily schedule which has seven full days
       of pairing schedules without a single repeated pair."},

       {text: "Given a paragraph of text with multiple sentences, print out the five most commonly appearing letters along with their number of occurrences."},

       {text: "Given a sample of text, write code that lists the top five most frequently occurring words (ignoring punctuation and casing). If you'd like a text to work with, [consider this one](http://www.huffingtonpost.com/2011/01/17/i-have-a-dream-speech-text_n_809993.html)."},

       {text: "It's time for a [logic problem](http://cl.ly/1q3b090E2r1O)!"},

       {text: "Let's talk about [real estate](http://cl.ly/2K1Y082i350U)"},

       {text: "Logic problem, [yeah](http://cl.ly/1h3u2o1W1710)!"},

       {text: "Can you find all prime numbers between 1-10000 using the sieve of Eratosthenes?"},

       {text: "Write an algorithm that, given three sorted collections, can turn them into
        a single sorted collection."},

       {text: "Given a hex-color input, like #F6336A, figure out the dominant resulting color,
        like \"red\" here. Implementing \"red\", \"green\", and \"blue\" should be easy-ish, but
        can you handle variations like \"purple\" (high blue + red)?"},

       {text: "build a solution for
        the problem of merging three sorted collection.

        IE, imagine we have three sets:

        * a: [1,4,9]
        * b: [2,3,5]
        * c: [6,7,8]

        Then the merge should produce [1,2,3,4,5,6,7,8,9].

        Try to solve a small problem first. Use pseudocode to separate the algorithmic
        thinking from the implementation."},

       {text: "Everybody loves a [logic problem](http://cl.ly/1M0B1j273Q1R)"},

       {text: "You will be working on [Word Rotation](https://github.com/turingschool/thinking_in_algorithms/blob/master/challenges/word_rotation.markdown) this morning."},

       {text: "Who doesn't love a good [logic game](http://cl.ly/0c402c1Y1R0c)?"},

       {text: "Here's a puzzle for you:

        Imagine you run a soccer league and you need to create a schedule. Each team
        plays only one game per week on Saturday.

        #### Easy

        Your league has eight teams. Generate (to the screen or to a file), a schedule that has each team play each other team exactly once.

        ##### Medium

        #Your league has two divisions of eight teams. Each team should play the other
        #teams in their division twice and the teams in the other division just once.

        ##### Hard

        Your league has four divisions of eight teams. Each team should play each team
        in their division twice and any two teams from each other division.
        "},

       {text: "[Logic Problems](http://cl.ly/023g2Z3G1O1c) are actually my favorite."},

       {text: "Become a [RubyWarrior](https://www.bloc.io/ruby-warrior/) and fight your way through slugs and archers. You can complete individually or with a pair at your option."},

       {text: "Find a pair of your choice and complete [this logic problem](http://cl.ly/1X3J0h0z3H3L)."},

       {text: "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."},

       {text: "**Meet up in your posses to solve the following puzzle.**

        There are 5 houses in 5 different colors. In each house lives a person of a different nationality. The 5 owners drink a certain type of beverage, smoke a certain brand of cigar, and keep a certain pet. Using the clues below can you determine who owns the fish?

        * The Brit lives in a red house.
        * The Swede keeps dogs as pets.
        * The Dane drinks tea.
        * The green house is on the immediate left of the white house.
        * The green house owner drinks coffee.
        * The person who smokes Pall Mall rears birds.
        * The owner of the yellow house smokes Dunhill.
        * The man living in the house right in the middle drinks milk.
        * The Norwegian lives in the first house.
        * The man who smokes Blend lives next door to the one who keeps cats.
        * The man who keeps horses lives next door to the man who smokes Dunhill.
        * The owner who smokes Blue Master drinks chocolate.
        * The German smokes Prince.
        * The Norwegian lives next to the blue house.
        * The man who smokes Blend has a neighbor who drinks water.
        "},

       {text: "Enough with the brain teasers, let's write some code.

        **Meet in your posses to solve the following problem.**

        The sum of the squares of the first ten natural numbers is,

        1<sup>2</sup> + 2<sup>2</sup> + ... + 10<sup>2</sup> = 385

        You square each number from one to ten and then you add them together.

        The square of the sum of the first ten natural numbers is,

        (1 + 2 + ... + 10)<sup>2</sup> = 55<sup>2</sup> = 3025

        You sum up each number and then you get the square of that sum.

        Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

        Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum. (Pro-tip: Write a method or function do figure this out on your behalf—don't do this by hand.)

        * Can you write a solution in Ruby?
        * What about JavaScript?
        * What about Processing?
        "}

    ])
  end
end

Seed.new



